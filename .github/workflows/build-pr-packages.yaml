# This automation builds 3p packages based on a PR or manually run

name: Build 3P Packages PR

on:
  # Allows you to run this workflow manually from the Actions tag
  workflow_dispatch:
    inputs:
      build_path:
        description: 'The json file to build'
        type: choice
        options: 
        - "package_build_list_host_windows.json"
        - "package_build_list_host_linux.json"
        - "package_build_list_host_linux-aarch64.json"
        - "package_build_list_host_darwin.json"

  pull_request:
    paths:
      - 'package_build_list_host_*.json'

jobs:
  detect-changes:
    name: Detecting changes in PR to build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect-platform.outputs.matrix }}
    
    steps:
    - name: Checkout 3P source repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 10
          
    - name: Get package and platform from JSON changes
      id: detect-platform
      run: |
        CHANGED_FILES=$(git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --name-only)
        JSON="{\"include\":["
        for FILE in $CHANGED_FILES; do
        	if [[ $FILE == package_build_list_host_* ]]; then
        		PLATFORM=$(echo $FILE | sed -n 's/package_build_list_host_\(.*\).json/\1/p')
        		case $PLATFORM in
        		linux*)
        			OS_RUNNER="ubuntu-latest"
        			;;
        		windows)
        			OS_RUNNER="windows-2019"
        			;;
        		darwin)
        			OS_RUNNER="macos-latest"
        			;;
        		*)
        			OS_RUNNER="windows-latest" # default
        			;;
        		esac
        
        		DIFF=$(git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --no-ext-diff --unified=0 --exit-code -a --no-prefix -- $FILE \
              | egrep "^\+" | grep Scripts)
        		PACKAGE=$(echo $DIFF | cut -d'"' -f2)
        
        		JSONline="{\"package\": \"$PACKAGE\", \"os\": \"$OS_RUNNER\"},"
        		if [[ "$JSON" != *"$JSONline"* ]]; then
        			JSON="$JSON$JSONline"
        		fi
        	fi
        done

        # Remove last "," and add closing brackets
        if [[ $JSON == *, ]]; then
          JSON="${JSON%?}"
        fi
        JSON="$JSON]}"
        echo $JSON

        # Set output
        echo "matrix=$( echo "$JSON" )" >> $GITHUB_OUTPUT

  build-on-specific-os:
    name: Build on "${{ matrix.os }}" for "${{ matrix.package }}"
    needs: detect-changes
    permissions:
      contents: read
      # We use ghcr.io to store the docker image cache for ARM builds
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Configure
      id: get-user
      run: echo "uid_gid=$(id -u):$(id -g)" >> $GITHUB_OUTPUT
      
    - name: Checkout 3P source repo
      uses: actions/checkout@v4
      with:
        path: 3p-package-source
    
    - name: Checkout 3P scripts repo
      uses: actions/checkout@v4
      with:
        repository: o3de/3p-package-scripts
        path: 3p-package-scripts
      
    - name: Update python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip' # caching pip dependencies
    
    - name: Install python dependancies
      run: |
        python3 -m pip install boto3 certifi
    
    - name: Update cmake/ninja
      uses: lukka/get-cmake@latest 

    - name: Update msbuild path
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1.12.0

    - name: Use sccache
      uses: hendrikmuhs/ccache-action@v1.2.10
      with:
        variant: sccache
        max-size: 2048M
        append-timestamp: false
        key: ${{ matrix.package }}-${{ matrix.os }}
        restore-keys:
          ${{ matrix.package }}-${{ matrix.os }}
        
    - name: Run build command
      if: ${{ !contains(matrix.package, 'aarch64') }}
      env:
        CMAKE_CXX_COMPILER_LAUNCHER: sccache
        CMAKE_C_COMPILER_LAUNCHER: sccache
      run: |
        python3 3p-package-scripts/o3de_package_scripts/build_package.py --search_path 3p-package-source ${{ matrix.package }}
    
    - name: Run build command (aarch64)
      if: contains(matrix.package, 'aarch64')
      uses: Wandalen/wretry.action@v1.3.0
      with:
        attempt_limit: 3
        attempt_delay: 100
        action: uraimo/run-on-arch-action@v2
        with: |
          arch: none
          distro: none
          base_image: --platform=linux/arm64 ghcr.io/${{ github.repository }}/run-on-arch-${{ github.repository_owner }}-${{ github.event.repository.name }}-build-container-aarch64-ubuntu-latest:latest
          setup: |
            grep -q ${{ matrix.package }} ${PWD}/3p-package-source/package_build_list_host_linux.json || rm ${PWD}/3p-package-source/package_build_list_host_linux.json
          dockerRunArgs: |
            --user ${{ steps.get-user.outputs.uid_gid }}
            --volume "${PWD}:/workspace"
            --volume "${PWD}/3p-package-scripts:/scripts"
            --volume "${PWD}/3p-package-source:/source"
          env: |
            CMAKE_CXX_COMPILER_LAUNCHER: sccache
            CMAKE_C_COMPILER_LAUNCHER: sccache
            SCCACHE_IDLE_TIMEOUT: 0 
            SCCACHE_DIR: /workspace/.sccache
            SCCACHE_CACHE_SIZE: 2048M
          shell: /bin/bash
          run: |
            lsb_release -a
            uname -a
            sccache --start-server
            sccache -z
            ls -lah /workspace
            python3 /scripts/o3de_package_scripts/build_package.py --search_path /source/ ${{ matrix.package }}

    - name: Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.package }}
        path: 3p-package-source/packages/*

  validate-packages:
    name: Validating ${{ matrix.package }}
    needs: [detect-changes, build-on-specific-os]
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    steps:
      - name: Download packages
        if: ${{ !contains(matrix.package, 'aarch64') }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.package }}
          
      - name: Verify SHA256
        if: ${{ !contains(matrix.package, 'aarch64') }}
        run: |
          echo "$(cat ${{ matrix.package }}.tar.xz.SHA256SUMS | cut -d" " -f1) ${{ matrix.package }}.tar.xz" | sha256sum --check

      - name: Decompress package
        if: ${{ !contains(matrix.package, 'aarch64') }}
        run: |
          tar -xvf ${{ matrix.package }}.tar.xz
    
      - name: Malware scan
        uses: dell/common-github-actions/malware-scanner@main
        with:
          directories: .
          options: -ri
          
  deploy-dev:
    name: Deploying ${{ matrix.package }} to dev S3 bucket
    runs-on: ubuntu-latest
    environment: development 
    needs: [detect-changes, build-on-specific-os, validate-packages]
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    steps:
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.package }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
           aws-access-key-id    :  ${{ secrets.AWS_CREDS_ACCESS_KEY }}
           aws-secret-access-key:  ${{ secrets.AWS_CREDS_SECRET_KEY }}
           aws-region           :  ${{ secrets.AWS_CREDS_REGION_NAME }}
           
      - name: Sync to S3
        run: |
           aws s3 cp . ${{ secrets.AWS_PACKAGE_DEV_S3_BUCKET }}/ --recursive --exclude "*" --include "${{ matrix.package }}*" --acl bucket-owner-full-control
        
  deploy-prod:
    runs-on: ubuntu-latest
    environment: production
    needs: [detect-changes, build-on-specific-os, deploy-dev]
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    steps:
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.package }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
           aws-access-key-id    :  ${{ secrets.AWS_CREDS_ACCESS_KEY }}
           aws-secret-access-key:  ${{ secrets.AWS_CREDS_SECRET_KEY }}
           aws-region           :  ${{ secrets.AWS_CREDS_REGION_NAME }}
           
      - name: Sync to S3
        run: |
           aws s3 cp ${{ secrets.AWS_PACKAGE_DEV_S3_BUCKET }}/ ${{ secrets.AWS_PACKAGE_PROD_S3_BUCKET }}/ --recursive --exclude "*" --include "${{ matrix.package }}*" --acl bucket-owner-full-control
           
